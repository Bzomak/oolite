
name: build-all

on:
  workflow_dispatch:
  push:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      ## This is for debugging only and helps developing the workflow.
      #- name: Environment Variables
      #  run: |
      #    printenv | sort

      - name: install all the necessary packages
        run: |
          sudo apt update
          sudo apt -y install git gobjc gnustep-devel make libsdl1.2-dev libvorbis-dev libopenal-dev g++ libespeak-dev libnspr4-dev

      - name: Checkout Oolite
        uses: actions/checkout@v3
        with:
          path: oolite
          fetch-depth: 0
          submodules: true

      ## This is for debugging only and helps developing the workflow.
      #- name: show filesystem before build
      #  run: |
      #    find . -not -path "./oolite/deps/Windows-deps/*" -not -path "./oolite/Mac-specific/*" -not -path "./oolite/.git/*"
          
      - name: compiling up to installer script (.run file)
        run: |
          cd oolite
          source /usr/share/GNUstep/Makefiles/GNUstep.sh
          make -f Makefile pkg-posix-nightly HOST_ARCH=$(uname -m)
          
      ## This is for debugging only and helps developing the workflow.
      #- name: show filesystem after build
      #  run: |
      #    find . -not -path "./oolite/Mac-specific/*"  -not -path "./oolite/deps/Windows-deps/*" -not -path "./oolite/tests/*" -not -path "./oolite/.git/*" -not -path "./oolite/deps/mozilla/*"

      - name: assemble release files
        run: |
          mkdir oolite-nightly
          cp -v oolite/installers/posix/oolite-*.run oolite-nightly

      - name: create tar ball
        run: |
          NAME=$(basename oolite-nightly/oolite-*.run .run)
          tar cvfz ${NAME}.tgz -C oolite-nightly .
      
      # This is for debugging only and helps developing the workflow.
      - name: show filesystem after installer
        run: |
          find . -not -path "./oolite/Mac-specific/*" -not -path "./oolite/deps/*" -not -path "./oolite/tests/*" -not -path "./oolite/.git/*"
          
      - name: Archive build tar ball
        uses: actions/upload-artifact@v3
        with:
          name: oolite-linux-nightly
          path: |
            oolite-*.tgz
          retention-days: 5
          

  build-windows:
    runs-on: windows-latest
    steps:
      ## This is for debugging only and helps developing the workflow.
      #- name: Environment Variables
      #  run: |
      #    Get-ChildItem Env: | Sort Name

      - name: Checkout DevelopmentEnvironment
        uses: actions/checkout@v3
        with:
          repository:  OoliteProject/oolite-windows-build-env
          path: DevelopmentEnvironment

      - name: Checkout Oolite
        uses: actions/checkout@v3
        with:
          path: oolite
          fetch-depth: 0
          submodules: true

      - name: Compile
        shell: cmd
        run: D:\a\oolite\oolite\DevelopmentEnvironment\gcc\Msys_x2\1.0\msys.cmd
          
      # check http://aegidian.org/bb/viewtopic.php?p=281821#p281821
      # this is for debug only; it creates huge logs and takes a long time to execute
      # - name: check filesystem
      #  run: |
      #    Get-ChildItem -Path "$env:GITHUB_WORKSPACE" â€“Recurse

      - name: Archive build
        uses: actions/upload-artifact@v3
        with:
          name: oolite-windows-nightly
          path: |
            oolite/installers/win32/OoliteInstall*.exe
          retention-days: 5

  release-marvinpinto:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      ## This is for debugging only and helps developing the workflow.
      #- name: Environment Variables
      #  run: |
      #    printenv | sort

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      # This is for debugging only and helps developing the workflow.
      - name: show filesystem after download
        run: |
          find .

      # For changes on master branch, create a new release.
      # It should move the 'latest' tag automatically.
      - name: Create Release
        if: github.ref == 'refs/heads/master'
        id: create_release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Oolite Nightly"
          files: |
            artifacts/oolite-windows-nightly/OoliteInstall*.exe
            artifacts/oolite-linux-nightly/oolite-*.tgz